#!/bin/python3

import sys

tab = [
    [8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 1.974, 0.074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [7.636, 0.901, 3.260, 3.669, 14.715, 1.066, 0.866, 0.737, 7.529, 0.613, 0.074, 5.456, 2.968, 7.095, 5.796, 2.521, 1.362, 6.693, 7.948, 7.244, 6.311, 1.838, 0.049, 0.427, 0.128, 0.326, 0.486, 0.051, 0, 0, 0, 0, 0, 0, 0.018, 0.085, 0, 0, 0, 0, 0, 0.271, 1.504, 0.218, 0.008, 0, 0, 0, 0, 0, 0.045, 0, 0, 0.005, 0, 0, 0, 0, 0, 0, 0, 0, 0.023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.058, 0, 0.060, 0, 0, 0, 0, 0, 0, 0],
    [6.516, 1.886, 2.732, 5.076, 16.396, 1.656, 3.009, 4.577, 6.550, 0.268, 1.417, 3.437, 2.534, 9.776, 2.594, 0.670, 0.018, 7.003, 7.270, 6.154, 4.166, 0.846, 1.921, 0.034, 0.039, 1.134, 0, 0, 0, 0, 0.578, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.443, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.307, 0, 0, 0, 0, 0, 0, 0.995, 0, 0, 0, 0, 0],
    [11.525, 2.215, 4.019, 5.010, 12.181, 0.692, 1.768, 0.703, 6.247, 0.493, 0.011, 4.967, 3.157, 6.712, 8.683, 2.510, 0.877, 6.871, 7.977, 4.632, 2.927, 1.138, 0.017, 0.215, 1.008, 0.467, 0, 0, 0.502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.725, 0, 0, 0, 0, 0.311, 0, 0, 0, 0, 0, 0.827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.168, 0, 0, 0.012, 0, 0, 0, 0, 0],
    [14.634, 1.043, 3.882, 4.992, 12.570, 1.023, 1.303, 0.781, 6.186, 0.397, 0.015, 2.779, 4.738, 4.446, 9.735, 2.523, 1.204, 6.530, 6.805, 4.336, 3.639, 1.575, 0.037, 0.253, 0.006, 0.470, 0.072, 0.562, 0.118, 0, 0, 0.733, 0, 0, 0, 0.530, 0, 0, 0, 0, 0, 0, 0.337, 0.450, 0, 0, 0, 0, 0, 0, 0, 0, 0.132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.635, 0.296, 0.040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.207, 0, 0, 0.026, 0, 0, 0, 0, 0],
    [12.117, 0.980, 0.776, 3.044, 8.995, 1.037, 1.171, 0.384, 10.012, 3.501, 4.163, 6.104, 2.994, 7.955, 8.779, 2.755, 0, 5.914, 6.092, 5.276, 3.183, 1.904, 0, 0, 0, 0.494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.691, 0, 0.022, 0, 0, 0, 0, 0, 0.055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.385, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.520, 0, 0, 0, 0, 0, 0],
    [11.745, 0.927, 4.501, 3.736, 11.792, 1.153, 1.644, 0.636, 10.143, 0.011, 0.009, 6.510, 2.512, 6.883, 9.832, 3.056, 0.505, 6.367, 4.981, 5.623, 3.011, 2.097, 0.033, 0.003, 0.020, 1.181, 0.635, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.030, 0.030, 0, 0, 0, 0, 0, 0, 0, 0.002, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.166, 0.166, 0, 0, 0, 0, 0, 0, 0, 0],
    [11.920, 2.844, 0.963, 4.706, 8.912, 0.461, 1.253, 1.212, 8.600, 0.034, 4.683, 5.922, 3.752, 7.487, 2.476, 0.886, 0, 6.722, 3.014, 3.314, 3.235, 0.959, 0, 0, 3.336, 1.500, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.125, 0, 0, 0, 0, 0, 5.114, 0, 0, 0, 0, 0, 0, 0.777, 0, 0, 0, 0, 0, 0, 1.780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.854, 0, 0, 0, 0, 0],
    [9.383, 1.535, 1.486, 4.702, 10.149, 2.027, 2.862, 2.090, 5.817, 0.614, 3.140, 5.275, 3.471, 8.542, 4.482, 1.839, 0.020, 8.431, 6.590, 7.691, 1.919, 2.415, 0.142, 0.159, 0.708, 0.070, 0, 0, 0, 1.338, 1.797, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [10.503, 1.740, 3.895, 3.725, 7.352, 0.143, 1.731, 1.015, 8.328, 1.836, 2.753, 2.564, 2.515, 6.237, 6.667, 2.445, 0, 5.243, 5.224, 2.475, 2.062, 0.012, 5.813, 0.004, 3.206, 4.852, 0, 0, 0, 0, 0, 0, 0.699, 0, 0, 0, 0, 0.743, 0, 0, 0, 0, 0, 0, 0, 1.035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.109, 0, 0.362, 0, 0, 0, 0, 1.141, 0, 0, 0, 0, 0, 0.814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.078, 0.706, 0],
    [7.486, 1.584, 1.242, 5.933, 18.91, 0.805, 3.403, 2.380, 6.499, 1.46, 2.248, 3.568, 2.213, 10.032, 6.063, 1.57, 0.009, 6.411, 3.73, 6.79, 1.99, 2.85, 1.52, 0.036, 0.035, 1.39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [6.025, 2.000, 0.565, 5.858, 15.453, 2.406, 4.077, 1.621, 6.000, 0.730, 3.395, 5.229, 3.237, 7.240, 4.636, 1.756, 0.007, 8.956, 5.805, 6.862, 1.979, 2.332, 0.069, 0.028, 0.698, 0.034, 0, 0, 0, 1.190, 0, 0, 0, 0.872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.939, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [10.110, 1.043, 0, 1.575, 6.418, 3.013, 4.241, 1.871, 7.578, 1.144, 3.314, 4.532, 4.041, 7.711, 2.166, 0.789, 0, 8.581, 5.630, 4.953, 4.562, 2.437, 0, 0.046, 0.900, 0, 0, 0, 1.799, 0, 0, 0, 0, 0.867, 0, 0, 0, 0, 0, 0, 4.393, 0, 0.647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.570, 0, 0, 0, 0, 0, 0, 0, 0, 0.777, 0, 0.994, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.455, 0, 0.613, 0, 0, 0, 0, 0.228, 0, 0, 0],
    [12.217, 0.281, 0.281, 1.043, 7.968, 0.194, 0.392, 1.851, 10.817, 2.042, 4.973, 5.761, 3.202, 8.826, 5.614, 1.842, 0.013, 2.872, 7.862, 8.750, 5.008, 2.250, 0.094, 0.031, 1.745, 0.051, 0, 0, 0, 0.003, 3.577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.444, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [8.421, 0.822, 0.740, 3.475, 7.562, 0.084, 0.092, 1.356, 6.073, 1.433, 2.894, 3.802, 2.446, 6.468, 6.695, 1.906, 0.001, 4.799, 5.212, 5.727, 2.160, 5.344, 0.016, 0.027, 1.043, 1.503, 0, 0, 0.867, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.462, 0.015, 0, 0, 0.633, 0, 0, 0, 1.222, 0, 0, 0, 0, 0, 1.643, 0, 0, 0, 0, 0, 0, 0.007, 0, 0, 0, 0.024, 0, 0, 0.380, 0, 0, 0, 0.688, 0, 0.006, 0, 0, 0.045, 0, 0, 0, 0.204, 0.995, 0, 0, 0.721]
]

char_tab = "abcdefghijklmnopqrstuvwxyzàâáåäãąæœçĉćčďðèéêëęěĝğĥîìíïıĵłñńňòöôóõøřŝşśšßťþùúûŭüůýźżž"

lang_tab = ["english", "french", "german", "spanish", "portuguese", "esperanto", "italian", "turkish", "swedish", "polish", "dutsh", "danish", "icelandic", "finnish", "czech"]

char_nb = len(char_tab)
lang_nb = len(lang_tab)

def isAlpha(c):
    for char in char_tab:
        if char == c:
            return True
    return False

def alphaPos(c):
    for i, char in enumerate(char_tab):
        if char == c:
            return i

def default_output(lang_freq, lang_prob):
    max_freq_id = lang_freq.index(max(lang_freq))
    for i in range(lang_nb):
        if i == max_freq_id:
            print(end='\033[1;32m')
        print(lang_tab[i], end=': ')
        print("({:.2f}%)".format(lang_freq[i] * 100 * lang_prob), end='\033[0m\n')

def json_output(lang_freq, lang_prob, path):
    try:
        with open(path, "w+") as file:
            max_freq_id = lang_freq.index(max(lang_freq))
            file.write('{\n    \"detected\": \"' + lang_tab[max_freq_id] + '\",\n    \"data\": {\n')
            for i in range(lang_nb):
                file.write('        \"' + lang_tab[i] + '\": \"')
                file.write("{:.2f}\"\n".format(lang_freq[i] * 100 * lang_prob))
            file.write('    }\n}\n')
    except:
        print("\033[1;41m ERROR \033[0m", "Unable to open \'" + path + "\' !")
        exit(3)

def txt_output(lang_freq, lang_prob, path):
    try:
        with open(path, "w+") as file:
            max_freq_id = lang_freq.index(max(lang_freq))
            for i in range(lang_nb):
                file.write(lang_tab[i] + ': ')
                file.write("({:.2f}%)\n".format(lang_freq[i] * 100 * lang_prob))
            file.write("\nThe detected language is " + lang_tab[max_freq_id] + "\n")
    except:
        print("\033[1;41m ERROR \033[0m", "Unable to open \'" + path + "\' !")
        exit(3)

def detect_lang(sentence, out):
    total_letters = 0
    letter_freq = [0.0]*char_nb
    lang_freq = [0.0]*lang_nb
    lang_prob = 0
    for c in sentence:
        if isAlpha(c):
            total_letters += 1
            letter_freq[alphaPos(c)] += 1
    for i in range(char_nb):
        letter_freq[i] /= total_letters
        for j in range(lang_nb):
            lang_freq[j] += abs(letter_freq[i] - tab[j][i] / 100)
    for i in range(lang_nb):
        lang_freq[i] = 1 - (lang_freq[i] / char_nb)
        lang_prob += lang_freq[i]
    lang_prob = 1 / lang_prob
    if not out:
        default_output(lang_freq, lang_prob)
    else:
        if out.endswith('.json'):
            json_output(lang_freq, lang_prob, out)
        else:
            txt_output(lang_freq, lang_prob, out)

def getopt():
    opttab = [
        ['-f', '--file'],
        ['-o', '--output']
    ]
    opts = ['', '', '']
    i = 1
    while i < len(sys.argv):
        find = False
        for opt in opttab:
            if sys.argv[i] == opt[0] or sys.argv[i] == opt[1]:
                find = True
                if i + 1 == len(sys.argv):
                    print("\033[1;41m ERROR \033[0m", "Invalid argument \'" + sys.argv[i] + "\', a parameter is needed !")
                    exit(1)
                i += 1
                if opt[0] == '-f':
                    opts[0] = sys.argv[i]
                elif opt[0] == '-o':
                    opts[1] = sys.argv[i]
                break
        if i == len(sys.argv) - 1 and not find:
            opts[2] = sys.argv[i]
        elif not find:
            print("\033[1;41m ERROR \033[0m", "Invalid argument \'" + sys.argv[i] + "\' !")
            exit(1)
        i += 1
    return opts

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        help(1)
    elif len(sys.argv) == 2:
        detect_lang(sys.argv[1], '')
    else:
        opt = getopt()
        if opt[0]:
            try:
                with open(opt[0], "r") as file:
                    opt[2] = file.read().replace('\n', '')
            except:
                print("\033[1;41m ERROR \033[0m", "Unable to open \'" + opt[0] + "\' !")
                exit(2)
        if not opt[2]:
            print("\033[1;44m INFO \033[0m", "Nothing to do.")
            exit(0)
        detect_lang(opt[2].lower(), opt[1])